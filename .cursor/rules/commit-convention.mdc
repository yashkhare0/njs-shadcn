---
description: 
globs: 
alwaysApply: false
---
---
description: After changes, stage files and create conventional commits with appropriate scoping
globs: ["**/*"]
alwaysApply: true
---

# Commit Convention Guidelines

## Rule: Conventional Commits with Scoped Changes

After making changes to the codebase, always stage the changes and create a commit following the conventional commit format with appropriate scoping.

### Commit Format:

```
type(scope): description

[optional body]

[optional footer(s)]
```

### Types:

- `feat`: New feature
- `fix`: Bug fix
- `refactor`: Code change that neither fixes a bug nor adds a feature
- `style`: Changes that don't affect code meaning (formatting, missing semi-colons, etc)
- `docs`: Documentation only changes
- `test`: Adding missing tests or correcting existing tests
- `chore`: Changes to the build process or auxiliary tools
- `perf`: Performance improvements

### Scope Conventions:

1. Frontend-only changes:
   ```
   feat(frontend:button): add new primary variant
   fix(frontend:locale): correct German translation for settings
   style(frontend:chat): improve message spacing
   ```

2. Backend-only changes:
   ```
   feat(backend:auth): add new OAuth provider
   fix(backend:api): correct pagination in chat endpoint
   perf(backend:indexing): optimize document processing
   ```

3. Rule changes:
   ```
   chore(rules:commit-convention): add new commit convention rule
   chore(rules:locale-casing): update title case guidelines
   chore(rules:new-rules): add front-matter requirements
   ```

4. Small, specific changes:
   ```
   fix(frontend:costs): correct price calculation display
   feat(backend:sharepoint): add new file type support
   ```

5. Broader changes affecting multiple components:
   ```
   feat(chat): implement real-time messaging
   refactor(auth): modernize authentication flow
   ```

6. Feature-specific changes across layers:
   ```
   feat(chat:sharepoint): add SharePoint file sharing in chat
   fix(costs:billing): correct usage calculation and display
   ```

### Examples:

✅ Good commits:
```
feat(frontend:locale): add French translations
fix(backend:api): correct message count in stats
refactor(chat): modernize messaging architecture
feat(frontend:costs): add new pricing display
fix(chat:sharepoint): correct file permission handling
chore(rules:locale-refactoring): add comprehensive search requirement
```

❌ Bad commits:
```
fix stuff
update code
frontend changes
(chat) new features
update rule file
```

### Implementation:

1. After Making Changes:
   - Review the changed files to understand the scope
   - Group related changes logically
   - Stage the files (`git add`)

2. Determine the Scope:
   - Is it frontend-only? Use `frontend:component`
   - Is it backend-only? Use `backend:component`
   - Is it a tiny, specific change? Use specific scope
   - Is it a broader change? Use feature name
   - Does it cross boundaries? Use `feature:subfeature`

3. Create the Commit:
   - Choose appropriate type
   - Apply scope convention
   - Write clear, concise description
   - Add body for complex changes
   - Add breaking change footer if needed

### Why:

- Maintains clear change history
- Makes changes easily traceable
- Facilitates automated changelog generation
- Helps with code review process
- Enables better release management

### Validation:

- Commit message follows conventional format
- Scope accurately reflects the changes
- Description is clear and concise
- Related changes are grouped together

- Breaking changes are properly marked 